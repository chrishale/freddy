/* 
  Grid Mixin
  ----------
  A responsive grid mixin for creating multiple types of grids based on; fixed columns or flexible widths.
  Heavliy influenced by the great (csswizardry/csswizardry-grids)[https://github.com/csswizardry/csswizardry-grids]
  
  Arguments:
  ----------
  $width: (auto|12|50%|(50%, small 100%))
    - Here you can pass in multiple different styles of arguments;
      + `auto` or `flex` will make the grid items have a flexible width (based on their content).
      + Key from the $grid-sizes list.
      + Single number; e.g. 12, 6. This will work out a percentage from your $grid-columns mixin: 12 => 100%, 6 => 50%.
      + Unitized value; e.g. 300px, 50%, 10em. This will give each grid item a fixed width.
      + Lastly, you can pass a list of values in the format of: (width, condition width, condition width) where condition is a key used for the `when` mixin. One item in the list can ommit the condition to provide a default. The width values can beformatted in as either; auto, single number or a value with a unit (as above).
        - e.g (4, medium 6, small 100%) or mobile-first: (12, medium 6, large-and-up 4)
  $gutter: ($grid-gutter|30)
    - Adds a gutter between each grid item. Defaults to the global $grid-gutter value, but can be overidden with any value with a unit.
  $rhythm: 0
    - Adds vertical space between items that stack onto more than one line. Either a value with a unit: e.g. 20px, or a number of baseline units (via the `vr` mixin).
  $align: (left|center|right)
    - Aligns the grid items within it's container. Defaults to left.
  $vertical-align: (top|middle|bottom)
    - Aligns the grid items vertically, when they differ in height. Defaults to top.
  $element: "item"
    - The class name of the element in BEM syntax.
  $reversed: (true|false)
    - Reverses the layout of the grid items without having to change source order in the DOM.
  $modifiers: (main 8, aux 4)
    - Here you can provide modifiers for the grid items in the format of (modifier width, modifier width). e.g. (main 8, aux 4) Which would produce the classes; .grid__item--main and .grid__item--aux, with the respective widths. Widths can be formatted in the same way as the $width argument (as above). e.g. (main (8, medium 12, small 12), aux (4, medium 12, small 12)).

  Example SCSS:
  -------------
  .nav {
    @include grid(auto, $grid-gutter: 30px, $align: center, $vertical-align: middle);
  }
  
  
  Example HTML:
  -------------
  <div class="nav">
    <div class="nav__item"><a href="#">Home</a></div>
    <div class="nav__item"><a href="#">About</a></div>
    <div class="nav__item"><a href="#">Service</a></div>
    <div class="nav__item"><a href="#">Contact</a></div>
  </div>

*/

$grid-columns: 12!default;
$grid-gutter: 40px!default;
$grid-sizes: (
  one-whole 100%,

  one-half 50%,

  one-third 33.333%,
  two-thirds 66.666%,

  one-quarter 25%,
  two-quarters one-half,
  three-quarters 75%,

  one-fifth 20%,
  two-fifths 40%,
  three-fifths 60%,
  four-fifths 80%,

  one-sixth 16.666%,
  two-sixths one-third,
  three-sixths one-half,
  four-sixths two-thirds,
  five-sixths 83.333%,

  one-eighth 12.5%,
  two-eighths one-quarter,
  three-eighths 37.5%,
  four-eighths one-half,
  five-eighths 62.5%,
  six-eighths three-quarters,
  seven-eighths 87.5%,

  one-tenth 10%,
  two-tenths one-fifth,
  three-tenths 30%,
  four-tenths two-fifths,
  five-tenths one-half,
  six-tenths three-fifths,
  seven-tenths 70%,
  eight-tenths four-fifths,
  nine-tenths 90%,

  one-twelfth 8.333%,
  two-twelfths one-sixth,
  three-twelfths one-quarter,
  four-twelfths one-third,
  five-twelfths 41.666,
  six-twelfths one-half,
  seven-twelfths 58.333%,
  eight-twelfths two-thirds,
  nine-twelfths three-quarters,
  ten-twelfths five-sixths,
  eleven-twelfths 91.666%
)!default;

@mixin grid-span($widths) {
  @if type-of($widths) == list {
    // if its a list with conditions like (condition unit, condition unit)
    @each $width in $widths {
      @if length($width) > 1 {
        @include when(nth($width, 1)) {
          @include grid-span(nth($width, 2));
        }
      } @else {
        @include grid-span($width);
      }
    }
  } @else {
    // else its a single width unit
    @if $widths == flex or $widths == auto {
      width: auto;
    } @else if type-of($widths) == string {
      @each $size in $grid-sizes {
        @if $widths == nth($size, 1) {
          @include grid-span(nth($size, 2));
        }
      }
    } @else if unitless($widths) {
      width: 100% / ($grid-columns / $widths);
    } @else {
      width: $widths;
    }
  }
}

@mixin grid-gutter($gutters, $element) {
  @if type-of($gutters) == list {
    // if its a list with conditions like (condition unit, condition unit)
    @each $gutter in $gutters {
      @if length($gutter) > 1 {
        @include when(nth($gutter, 1)) {
          @include grid-gutter(nth($gutter, 2), $element);
        }
      } @else {
        @include grid-gutter($gutter, $element);
      }
    }
  } @else {
    // else its a single gutter unit
    @if $gutters == flex or $gutters == auto {
      margin-left: 0;
      &__#{$element} {
        padding-left: auto;
      }
    } @else if type-of($gutters) == string {
      @each $size in $grid-sizes {
        @if $gutters == nth($size, 1) {
          @include grid-gutter(nth($size, 2), $element);
        }
      }
    } @else if unitless($gutters) {
      margin-left: -(100% / ($grid-columns / $gutters));
      &__#{$element} {
        padding-left: 100% / ($grid-columns / $gutters);
      }
    } @else {
      margin-left: -($gutters);
      &__#{$element} {
        padding-left: $gutters;
      }
    }
  }
}

@mixin grid($width: auto, 
            $gutter: $grid-gutter,
            $rhythm: 0,
            $align: left,
            $vertical-align: top,
            $element: "item",
            $reversed: false,
            $modifiers: ()) {

  display: block;
  text-align: $align;
  
  @include vr(($rhythm * -1));
  
  font-size: 0;
  @if $reversed { direction: rtl; }
  @content;
  
  @include grid-gutter($gutter, $element);

  &__#{$element} {
    @if $reversed { direction: ltr; }
    @include box-sizing(border-box);
    @if unitless($rhythm) {
      @include vr($rhythm);
    } @else {
      padding-top: $rhythm;
    }
    font-size: medium;
    display: inline-block;
    vertical-align: $vertical-align;
    text-align: left;
    
    @include grid-span($width);

    // output the modifiers
    @if length($modifiers) > 0 {
      @if length(nth($modifiers, 1)) == 1 {
        &--#{nth($modifiers, 1)} {
          @include grid-span(nth($modifiers, 2));
        }
      } @else {
        @each $modifier in $modifiers {
          @if length($modifier) > 1 {
            &--#{nth($modifier, 1)} {
              @include grid-span(nth($modifier, 2));
            }
          }
        }
      }
    }
  }
}